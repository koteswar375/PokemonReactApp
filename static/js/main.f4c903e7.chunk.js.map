{"version":3,"sources":["Reducers/PokemonReducer.js","Contexts/PokemonContext.js","Components/PokemonList.js","Components/CapturedPokemonList.js","Components/PokemonForm.js","App.js","serviceWorker.js","index.js"],"names":["pokemonReducer","state","action","type","pokemons","pokemon","capturedPokemons","filter","obj","PokemonContext","createContext","PokemonContextProvider","props","useReducer","id","name","dispatch","Provider","value","capture","release","add","children","PokemonList","useContext","className","map","onClick","CapturedPokemonList","PokemonForm","useState","setName","placeholder","onChange","e","target","preventDefault","Math","floor","random","App","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MAkCeA,EA5BQ,SAACC,EAAOC,GAgB3B,OAAQA,EAAOC,MACX,IAtBe,UAuBX,MAZe,CACnBC,SAAS,GAAD,mBAAMH,EAAMG,UAAZ,CAAsBF,EAAOG,UACrCC,iBAAmBL,EAAMK,iBAAiBC,QAAO,SAAAC,GAAG,OAAIA,IAAQN,EAAOG,YAWvE,IAzBe,UA0BX,MAnBe,CACnBD,SAAUH,EAAMG,SAASG,QAAO,SAAAC,GAAG,OAAIA,IAAQN,EAAOG,WACtDC,iBAAiB,GAAD,mBAAML,EAAMK,kBAAZ,CAA8BJ,EAAOG,WAkBrD,IAzBW,MA0BP,MAXW,CACfD,SAAS,GAAD,mBAAMH,EAAMG,UAAZ,CAAsBF,EAAOG,UACrCC,iBAAiB,YAAML,EAAMK,mBAU7B,QACI,OAAOL,IC1BNQ,EAAiBC,0BAiCfC,EA/BgB,SAACC,GAAW,IAAD,EACZC,qBAAWb,EACjC,CACII,SAAU,CACN,CAAEU,GAAI,EAAGC,KAAM,aACf,CAAED,GAAI,EAAGC,KAAM,cACf,CAAED,GAAI,EAAGC,KAAM,aAEnBT,iBAAkB,KARY,mBAC/BL,EAD+B,KACxBe,EADwB,KAwBtC,OACI,kBAACP,EAAeQ,SAAhB,CAAyBC,MAAO,CAAEd,SAASH,EAAMG,SAAUE,iBAAiBL,EAAMK,iBAAkBa,QAbxF,SAACd,GACbW,EAAS,CAAEb,KDnBI,UCmBWE,aAYmFe,QATjG,SAACf,GACbW,EAAS,CAAEb,KDtBI,UCsBWE,aAQ4FgB,IAL9G,SAAChB,GACTW,EAAS,CAACb,KDzBC,MCyBSE,eAKfO,EAAMU,WCXJC,EAjBK,SAACX,GAAW,IAAD,EACCY,qBAAWf,GAAhCL,EADoB,EACpBA,SAAUe,EADU,EACVA,QAEjB,OACI,yBAAKM,UAAU,wCACX,4CACCrB,EAASsB,KAAI,SAAArB,GAAO,OACjB,6BACI,4BAAKA,EAAQU,MACb,4BAAQU,UAAU,MAAME,QAAS,kBAAIR,EAAQd,KAA7C,iBCQLuB,EAjBa,SAAChB,GAAW,IAAD,EACCY,qBAAWf,GAAxCH,EAD4B,EAC5BA,iBAAkBc,EADU,EACVA,QAEzB,OACI,yBAAKK,UAAU,gDACX,qDACCnB,EAAiBoB,KAAI,SAAArB,GAAO,OACzB,6BACI,4BAAKA,EAAQU,MACb,4BAAQU,UAAU,MAAME,QAAS,kBAAIP,EAAQf,KAA7C,iBCWLwB,EArBK,SAACjB,GAAW,IAAD,EACHkB,mBAAS,IADN,mBACpBf,EADoB,KACdgB,EADc,KAGpBV,EAAOG,qBAAWf,GAAlBY,IAQP,OACI,0BAAMI,UAAU,gBACZ,yBAAKA,UAAU,eACX,2BAAOtB,KAAK,OAAOe,MAAOH,EAAMD,GAAG,OAAOkB,YAAY,wBAAwBC,SAAU,SAACC,GAAD,OAAKH,EAAQG,EAAEC,OAAOjB,UAC9G,4BAAQO,UAAU,MAAME,QAVjB,SAACO,GAChBA,EAAEE,iBACFf,EAAI,CAACN,OAAMD,GAAGuB,KAAKC,MAAoB,OAAdD,KAAKE,YAC9BR,EAAQ,MAOA,kBCIDS,MAhBf,WACE,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,KACE,yBAAKgB,MAAM,qBACT,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGF,kBAAC,EAAD,SCHYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f4c903e7.chunk.js","sourcesContent":["export const CAPTURE = 'CAPTURE';\r\nexport const RELEASE = 'RELEASE';\r\nexport const ADD = 'ADD';\r\n\r\n\r\n\r\nconst pokemonReducer = (state, action) => {\r\n    const capture = () => ({\r\n        pokemons: state.pokemons.filter(obj => obj !== action.pokemon),\r\n        capturedPokemons: [...state.capturedPokemons, action.pokemon]\r\n    });\r\n\r\n    const release = () => ({\r\n        pokemons: [...state.pokemons, action.pokemon],\r\n        capturedPokemons:  state.capturedPokemons.filter(obj => obj !== action.pokemon)\r\n    });\r\n\r\n    const add = () => ({\r\n        pokemons: [...state.pokemons, action.pokemon],\r\n        capturedPokemons:  [...state.capturedPokemons]\r\n    })\r\n\r\n    switch (action.type) {\r\n        case RELEASE:\r\n            return release();\r\n        case CAPTURE:\r\n            return capture();\r\n        case ADD:\r\n            return add()\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default pokemonReducer;","import React, { createContext, useReducer } from 'react';\r\nimport pokemonReducer, { CAPTURE, RELEASE, ADD } from '../Reducers/PokemonReducer';\r\n\r\n\r\nexport const PokemonContext = createContext();\r\n\r\nconst PokemonContextProvider = (props) => {\r\n    const [state, dispatch] = useReducer(pokemonReducer, \r\n        {\r\n            pokemons: [\r\n                { id: 1, name: 'Bulbasaur' },\r\n                { id: 2, name: 'Charmander' },\r\n                { id: 3, name: 'Squirtle' }\r\n            ],\r\n            capturedPokemons: []\r\n        }\r\n    );\r\n\r\n    const capture = (pokemon) => {\r\n        dispatch({ type: CAPTURE, pokemon });\r\n    };\r\n\r\n    const release = (pokemon) =>  {\r\n        dispatch({ type: RELEASE, pokemon });\r\n    };\r\n\r\n    const add = (pokemon) => {\r\n        dispatch({type:ADD, pokemon})\r\n    }\r\n\r\n    return (\r\n        <PokemonContext.Provider value={{ pokemons:state.pokemons, capturedPokemons:state.capturedPokemons, capture, release, add }}>\r\n            {props.children}\r\n        </PokemonContext.Provider>\r\n    )\r\n}\r\n\r\nexport default PokemonContextProvider;","import React, {useContext} from 'react';\r\nimport { PokemonContext } from '../Contexts/PokemonContext';\r\n\r\n\r\nconst PokemonList = (props) => {\r\n    const {pokemons, capture} = useContext(PokemonContext);\r\n\r\n    return (\r\n        <div className=\"pokemon-list center-align z-depth-2 \" >\r\n            <h3>Pokemon List</h3>\r\n            {pokemons.map(pokemon => (\r\n                <div>\r\n                    <h6>{pokemon.name}</h6>\r\n                    <button className=\"btn\" onClick={()=>capture(pokemon)}>Capture</button>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default PokemonList;","import React, {useContext} from 'react';\r\nimport { PokemonContext } from '../Contexts/PokemonContext';\r\n\r\n\r\nconst CapturedPokemonList = (props) => {\r\n    const {capturedPokemons, release} = useContext(PokemonContext);\r\n\r\n    return (\r\n        <div className=\"pokemon-captured-list center-align z-depth-2\" >\r\n            <h3>Pokemon Captured List</h3>\r\n            {capturedPokemons.map(pokemon => (\r\n                <div>\r\n                    <h6>{pokemon.name}</h6>\r\n                    <button className=\"btn\" onClick={()=>release(pokemon)}>Release</button>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default CapturedPokemonList;","import React, {useState, useContext} from 'react';\r\nimport { PokemonContext } from '../Contexts/PokemonContext';\r\n\r\nconst PokemonForm = (props) => {\r\n    const [name, setName] = useState('');\r\n\r\n    const {add} = useContext(PokemonContext);\r\n\r\n    const addPokemon = (e) => {\r\n        e.preventDefault()\r\n        add({name, id:Math.floor(Math.random()*103838)})\r\n        setName('')\r\n    }\r\n\r\n    return (\r\n        <form className=\"pokemon-form\">\r\n            <div className=\"input-field\">\r\n                <input type=\"text\" value={name} id=\"name\" placeholder=\"Enter name of pokemon\" onChange={(e)=>setName(e.target.value)} />\r\n                <button className=\"btn\" onClick={addPokemon}>Add Pokemon</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PokemonForm;","import React from 'react';\r\nimport PokemonContextProvider from './Contexts/PokemonContext';\r\nimport PokemonList from './Components/PokemonList';\r\nimport CapturedPokemonList from './Components/CapturedPokemonList';\r\nimport PokemonForm from './Components/PokemonForm';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PokemonContextProvider>\r\n        <div class=\"pokemon-container\">\r\n          <PokemonList />\r\n          <CapturedPokemonList />\r\n\r\n        </div>\r\n        <PokemonForm />\r\n\r\n      </PokemonContextProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'materialize-css/dist/css/materialize.min.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}